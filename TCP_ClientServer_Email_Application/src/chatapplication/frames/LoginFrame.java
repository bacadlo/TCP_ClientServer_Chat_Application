/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication.frames;

import chatapplication.database_connection.DatabaseManager;
import chatapplication.main.Frame;
import com.mysql.jdbc.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

/**
 *
 * @author GJirka
 */
public class LoginFrame extends javax.swing.JInternalFrame implements InternalFrameListener{

    private DatabaseManager database;
    private Frame main;
    
    /**
     * Creates new form LoginFrame
     */
    
    public LoginFrame(DatabaseManager database, Frame main) {
        this.database = database; 
        this.main = main;
        addInternalFrameListener(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        Login = new javax.swing.JButton();
        error = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();

        setClosable(true);
        setTitle("Login");

        usernameLabel.setText("username: ");

        passwordLabel.setText("password: ");

        Login.setText("Login");
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordLabel)
                            .addComponent(usernameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Login)
                            .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(password)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Login)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(error)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        try {
            checkForUser();
        } catch (SQLException ex) {
            Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LoginActionPerformed

    public boolean checkForUser() throws SQLException, Exception {
        Object[] columns = {"username", "password", "mail"};
        this.error.setForeground(java.awt.Color.RED);
        String user = this.username.getText();
        String pass = this.password.getText();
        if (!validEmail(user)) {
            PreparedStatement count = (PreparedStatement) database.connection.prepareStatement("SELECT COUNT(username) "
                    + "FROM users WHERE username = " + "'" + user + "'");
            ResultSet result = count.executeQuery();
            result.next();
            if (result.getInt(1) > 0) {
                PreparedStatement db_user = database.Select(columns, "users", "username = " + "'" + user + "'");
                ResultSet users = db_user.executeQuery();
                users.next();
                if (pass.equals(users.getString("password"))) {
                    Object[] session = {"session"};
                    PreparedStatement checkIfLoged = database.Select(session, "users", "username="+"'"+user+"'");
                    ResultSet loged = checkIfLoged.executeQuery();
                    loged.next();
                    if(loged.getString("session").equals("0")){
                        setErrorText("");
                        PreparedStatement update = database.Update("users", "session", "1", "username = "+"'"+user+"'");
                        if(update.executeUpdate() == 1){
                            this.main.isLogged(user);
                            this.main.getLoginFrame().setVisible(false);
                        }else{
                            JOptionPane.showMessageDialog(this,"Error with login.");
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,"Someone is loged on this account.","Account is used"
                                ,JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    setErrorText("Password is incorrect.");
                }
            } else {
                setErrorText("Username does not exist.");
            }
        } else {
            PreparedStatement count = (PreparedStatement) database.connection.prepareStatement("SELECT COUNT(mail) "
                    + "FROM users WHERE mail = " + "'" + user + "'");
            ResultSet result = count.executeQuery();
            result.next();
            if (result.getInt(1) > 0) {
                PreparedStatement db_email = database.Select(columns, "users", "mail = " + "'" + user + "'");
                ResultSet users = db_email.executeQuery();
                users.next();
                if (pass.equals(users.getString("password"))) {
                    Object[] session = {"session"};
                    PreparedStatement checkIfLoged = database.Select(session, "users", "mail="+"'"+user+"'");
                    ResultSet loged = checkIfLoged.executeQuery();
                    loged.next();
                    if(loged.getString("session").equals("0")){ 
                        if(!main.isLogged){
                            setErrorText("");
                            PreparedStatement update = database.Update("users", "session", "1", "mail = "+"'"+user+"'");
                            if(update.executeUpdate() == 1){
                                PreparedStatement db_username = database.Select(new Object[]{"username"},"users","mail = "+"'"+user+"'");
                                ResultSet res_username = db_username.executeQuery();
                                res_username.next();
                                this.main.isLogged(res_username.getString("username"));
                                this.main.getLoginFrame().setVisible(false);
                            }else{
                                JOptionPane.showMessageDialog(this,"Error with login.");
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,"Someone is loged on this account.","Account is used"
                                ,JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    setErrorText("Password is incorrect.");
                }
            } else {
                setErrorText("E-mail does not exist.");
            }
        }

        return false;
    }

    public void setErrorText(String text) {
        this.error.setText(text);
    }

    public boolean validEmail(String email) throws Exception {
        String emailPattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\"
                + ".[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
        Pattern pattern = Pattern.compile(emailPattern);
        Matcher matcher = pattern.matcher(email);
        if (matcher.matches()) {
            return true;
        }
        return false;
    }
    public void onExit() throws SQLException{
        String user = this.username.getText();
        PreparedStatement isSession = database.Select(new Object[]{"session"}, "users", "username = "+"'"+user+"'");
        ResultSet checkSession = isSession.executeQuery();
        checkSession.next();
        if(checkSession.getString("session").equals("1")){
            PreparedStatement update = database.Update("users", "session", "0", "username = "+"'"+user+"'");
            System.out.println(update.executeUpdate());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Login;
    private javax.swing.JLabel error;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField username;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        
    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
    }
}
